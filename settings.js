// JavaScript Document

document.addEventListener("DOMContentLoaded", function () {
    window.addEventListener("scroll", function() {
        const navbar = document.getElementById("main-nav");
        const content = document.getElementById("tmpl-service");
        const scrollTop = window.pageYOffset;
        
        if (scrollTop < content.offsetTop) {
            navbar.classList.remove("fixed-nav");
        } else {
            navbar.classList.add("fixed-nav");
        }
    });
});

!function (t) { "function" == typeof define && define.amd ? define(["jquery"], t) : "object" == typeof module && "object" == typeof module.exports ? module.exports = t(require("jquery")) : t(jQuery) }(function ($) { function initMouseDetection(t) { var e = ".smartmenus_mouse"; if (mouseDetectionEnabled || t) mouseDetectionEnabled && t && ($(document).unbind(e), mouseDetectionEnabled = !1); else { var i = !0, s = null; $(document).bind(getEventsNS([["mousemove", function (t) { var e = { x: t.pageX, y: t.pageY, timeStamp: (new Date).getTime() }; if (s) { var o = Math.abs(s.x - e.x), a = Math.abs(s.y - e.y); if ((o > 0 || a > 0) && 2 >= o && 2 >= a && e.timeStamp - s.timeStamp <= 300 && (mouse = !0, i)) { var n = $(t.target).closest("a"); n.is("a") && $.each(menuTrees, function () { return $.contains(this.$root[0], n[0]) ? (this.itemEnter({ currentTarget: n[0] }), !1) : void 0 }), i = !1 } } s = e }], [touchEvents ? "touchstart" : "pointerover pointermove pointerout MSPointerOver MSPointerMove MSPointerOut", function (t) { isTouchEvent(t.originalEvent) && (mouse = !1) }]], e)), mouseDetectionEnabled = !0 } } function isTouchEvent(t) { return !/^(4|mouse)$/.test(t.pointerType) } function getEventsNS(t, e) { e || (e = ""); var i = {}; return $.each(t, function (t, s) { i[s[0].split(" ").join(e + " ") + e] = s[1] }), i } var menuTrees = [], IE = !!window.createPopup, mouse = !1, touchEvents = "ontouchstart" in window, mouseDetectionEnabled = !1, requestAnimationFrame = window.requestAnimationFrame || function (t) { return setTimeout(t, 1e3 / 60) }, cancelAnimationFrame = window.cancelAnimationFrame || function (t) { clearTimeout(t) }; return $.SmartMenus = function (t, e) { this.$root = $(t), this.opts = e, this.rootId = "", this.accessIdPrefix = "", this.$subArrow = null, this.activatedItems = [], this.visibleSubMenus = [], this.showTimeout = 0, this.hideTimeout = 0, this.scrollTimeout = 0, this.clickActivated = !1, this.focusActivated = !1, this.zIndexInc = 0, this.idInc = 0, this.$firstLink = null, this.$firstSub = null, this.disabled = !1, this.$disableOverlay = null, this.$touchScrollingSub = null, this.cssTransforms3d = "perspective" in t.style || "webkitPerspective" in t.style, this.wasCollapsible = !1, this.init() }, $.extend($.SmartMenus, { hideAll: function () { $.each(menuTrees, function () { this.menuHideAll() }) }, destroy: function () { for (; menuTrees.length;)menuTrees[0].destroy(); initMouseDetection(!0) }, prototype: { init: function (t) { var e = this; if (!t) { menuTrees.push(this), this.rootId = ((new Date).getTime() + Math.random() + "").replace(/\D/g, ""), this.accessIdPrefix = "sm-" + this.rootId + "-", this.$root.hasClass("sm-rtl") && (this.opts.rightToLeftSubMenus = !0); var i = ".smartmenus"; this.$root.data("smartmenus", this).attr("data-smartmenus-id", this.rootId).dataSM("level", 1).bind(getEventsNS([["mouseover focusin", $.proxy(this.rootOver, this)], ["mouseout focusout", $.proxy(this.rootOut, this)], ["keydown", $.proxy(this.rootKeyDown, this)]], i)).delegate("a", getEventsNS([["mouseenter", $.proxy(this.itemEnter, this)], ["mouseleave", $.proxy(this.itemLeave, this)], ["mousedown", $.proxy(this.itemDown, this)], ["focus", $.proxy(this.itemFocus, this)], ["blur", $.proxy(this.itemBlur, this)], ["click", $.proxy(this.itemClick, this)]], i)), i += this.rootId, this.opts.hideOnClick && $(document).bind(getEventsNS([["touchstart", $.proxy(this.docTouchStart, this)], ["touchmove", $.proxy(this.docTouchMove, this)], ["touchend", $.proxy(this.docTouchEnd, this)], ["click", $.proxy(this.docClick, this)]], i)), $(window).bind(getEventsNS([["resize orientationchange", $.proxy(this.winResize, this)]], i)), this.opts.subIndicators && (this.$subArrow = $("<span/>").addClass("sub-arrow"), this.opts.subIndicatorsText && this.$subArrow.html(this.opts.subIndicatorsText)), initMouseDetection() } if (this.$firstSub = this.$root.find("ul").each(function () { e.menuInit($(this)) }).eq(0), this.$firstLink = this.$root.find("a").eq(0), this.opts.markCurrentItem) { var s = /(index|default)\.[^#\?\/]*/i, o = /#.*/, a = window.location.href.replace(s, ""), n = a.replace(o, ""); this.$root.find("a").each(function () { var t = this.href.replace(s, ""), i = $(this); (t == a || t == n) && (i.addClass("current"), e.opts.markCurrentTree && i.parentsUntil("[data-smartmenus-id]", "ul").each(function () { $(this).dataSM("parent-a").addClass("current") })) }) } this.wasCollapsible = this.isCollapsible() }, destroy: function (t) { if (!t) { var e = ".smartmenus"; this.$root.removeData("smartmenus").removeAttr("data-smartmenus-id").removeDataSM("level").unbind(e).undelegate(e), e += this.rootId, $(document).unbind(e), $(window).unbind(e), this.opts.subIndicators && (this.$subArrow = null) } this.menuHideAll(); var i = this; this.$root.find("ul").each(function () { var t = $(this); t.dataSM("scroll-arrows") && t.dataSM("scroll-arrows").remove(), t.dataSM("shown-before") && ((i.opts.subMenusMinWidth || i.opts.subMenusMaxWidth) && t.css({ width: "", minWidth: "", maxWidth: "" }).removeClass("sm-nowrap"), t.dataSM("scroll-arrows") && t.dataSM("scroll-arrows").remove(), t.css({ zIndex: "", top: "", left: "", marginLeft: "", marginTop: "", display: "" })), 0 == (t.attr("id") || "").indexOf(i.accessIdPrefix) && t.removeAttr("id") }).removeDataSM("in-mega").removeDataSM("shown-before").removeDataSM("ie-shim").removeDataSM("scroll-arrows").removeDataSM("parent-a").removeDataSM("level").removeDataSM("beforefirstshowfired").removeAttr("role").removeAttr("aria-hidden").removeAttr("aria-labelledby").removeAttr("aria-expanded"), this.$root.find("a.has-submenu").each(function () { var t = $(this); 0 == t.attr("id").indexOf(i.accessIdPrefix) && t.removeAttr("id") }).removeClass("has-submenu").removeDataSM("sub").removeAttr("aria-haspopup").removeAttr("aria-controls").removeAttr("aria-expanded").closest("li").removeDataSM("sub"), this.opts.subIndicators && this.$root.find("span.sub-arrow").remove(), this.opts.markCurrentItem && this.$root.find("a.current").removeClass("current"), t || (this.$root = null, this.$firstLink = null, this.$firstSub = null, this.$disableOverlay && (this.$disableOverlay.remove(), this.$disableOverlay = null), menuTrees.splice($.inArray(this, menuTrees), 1)) }, disable: function (t) { if (!this.disabled) { if (this.menuHideAll(), !t && !this.opts.isPopup && this.$root.is(":visible")) { var e = this.$root.offset(); this.$disableOverlay = $('<div class="sm-jquery-disable-overlay"/>').css({ position: "absolute", top: e.top, left: e.left, width: this.$root.outerWidth(), height: this.$root.outerHeight(), zIndex: this.getStartZIndex(!0), opacity: 0 }).appendTo(document.body) } this.disabled = !0 } }, docClick: function (t) { return this.$touchScrollingSub ? void (this.$touchScrollingSub = null) : void ((this.visibleSubMenus.length && !$.contains(this.$root[0], t.target) || $(t.target).is("a")) && this.menuHideAll()) }, docTouchEnd: function (t) { if (this.lastTouch) { if (this.visibleSubMenus.length && (void 0 === this.lastTouch.x2 || this.lastTouch.x1 == this.lastTouch.x2) && (void 0 === this.lastTouch.y2 || this.lastTouch.y1 == this.lastTouch.y2) && (!this.lastTouch.target || !$.contains(this.$root[0], this.lastTouch.target))) { this.hideTimeout && (clearTimeout(this.hideTimeout), this.hideTimeout = 0); var e = this; this.hideTimeout = setTimeout(function () { e.menuHideAll() }, 350) } this.lastTouch = null } }, docTouchMove: function (t) { if (this.lastTouch) { var e = t.originalEvent.touches[0]; this.lastTouch.x2 = e.pageX, this.lastTouch.y2 = e.pageY } }, docTouchStart: function (t) { var e = t.originalEvent.touches[0]; this.lastTouch = { x1: e.pageX, y1: e.pageY, target: e.target } }, enable: function () { this.disabled && (this.$disableOverlay && (this.$disableOverlay.remove(), this.$disableOverlay = null), this.disabled = !1) }, getClosestMenu: function (t) { for (var e = $(t).closest("ul"); e.dataSM("in-mega");)e = e.parent().closest("ul"); return e[0] || null }, getHeight: function (t) { return this.getOffset(t, !0) }, getOffset: function (t, e) { var i; "none" == t.css("display") && (i = { position: t[0].style.position, visibility: t[0].style.visibility }, t.css({ position: "absolute", visibility: "hidden" }).show()); var s = t[0].getBoundingClientRect && t[0].getBoundingClientRect(), o = s && (e ? s.height || s.bottom - s.top : s.width || s.right - s.left); return o || 0 === o || (o = e ? t[0].offsetHeight : t[0].offsetWidth), i && t.hide().css(i), o }, getStartZIndex: function (t) { var e = parseInt(this[t ? "$root" : "$firstSub"].css("z-index")); return !t && isNaN(e) && (e = parseInt(this.$root.css("z-index"))), isNaN(e) ? 1 : e }, getTouchPoint: function (t) { return t.touches && t.touches[0] || t.changedTouches && t.changedTouches[0] || t }, getViewport: function (t) { var e = t ? "Height" : "Width", i = document.documentElement["client" + e], s = window["inner" + e]; return s && (i = Math.min(i, s)), i }, getViewportHeight: function () { return this.getViewport(!0) }, getViewportWidth: function () { return this.getViewport() }, getWidth: function (t) { return this.getOffset(t) }, handleEvents: function () { return !this.disabled && this.isCSSOn() }, handleItemEvents: function (t) { return this.handleEvents() && !this.isLinkInMegaMenu(t) }, isCollapsible: function () { return "static" == this.$firstSub.css("position") }, isCSSOn: function () { return "block" == this.$firstLink.css("display") }, isFixed: function () { var t = "fixed" == this.$root.css("position"); return t || this.$root.parentsUntil("body").each(function () { return "fixed" == $(this).css("position") ? (t = !0, !1) : void 0 }), t }, isLinkInMegaMenu: function (t) { return $(this.getClosestMenu(t[0])).hasClass("mega-menu") }, isTouchMode: function () { return !mouse || this.opts.noMouseOver || this.isCollapsible() }, itemActivate: function (t, e) { var i = t.closest("ul"), s = i.dataSM("level"); if (s > 1 && (!this.activatedItems[s - 2] || this.activatedItems[s - 2][0] != i.dataSM("parent-a")[0])) { var o = this; $(i.parentsUntil("[data-smartmenus-id]", "ul").get().reverse()).add(i).each(function () { o.itemActivate($(this).dataSM("parent-a")) }) } if ((!this.isCollapsible() || e) && this.menuHideSubMenus(this.activatedItems[s - 1] && this.activatedItems[s - 1][0] == t[0] ? s : s - 1), this.activatedItems[s - 1] = t, this.$root.triggerHandler("activate.smapi", t[0]) !== !1) { var a = t.dataSM("sub"); a && (this.isTouchMode() || !this.opts.showOnClick || this.clickActivated) && this.menuShow(a) } }, itemBlur: function (t) { var e = $(t.currentTarget); this.handleItemEvents(e) && this.$root.triggerHandler("blur.smapi", e[0]) }, itemClick: function (t) { var e = $(t.currentTarget); if (this.handleItemEvents(e)) { if (this.$touchScrollingSub && this.$touchScrollingSub[0] == e.closest("ul")[0]) return this.$touchScrollingSub = null, t.stopPropagation(), !1; if (this.$root.triggerHandler("click.smapi", e[0]) === !1) return !1; var i = $(t.target).is("span.sub-arrow"), s = e.dataSM("sub"), o = s ? 2 == s.dataSM("level") : !1; if (s && !s.is(":visible")) { if (this.opts.showOnClick && o && (this.clickActivated = !0), this.itemActivate(e), s.is(":visible")) return this.focusActivated = !0, !1 } else if (this.isCollapsible() && i) return this.itemActivate(e), this.menuHide(s), !1; return this.opts.showOnClick && o || e.hasClass("disabled") || this.$root.triggerHandler("select.smapi", e[0]) === !1 ? !1 : void 0 } }, itemDown: function (t) { var e = $(t.currentTarget); this.handleItemEvents(e) && e.dataSM("mousedown", !0) }, itemEnter: function (t) { var e = $(t.currentTarget); if (this.handleItemEvents(e)) { if (!this.isTouchMode()) { this.showTimeout && (clearTimeout(this.showTimeout), this.showTimeout = 0); var i = this; this.showTimeout = setTimeout(function () { i.itemActivate(e) }, this.opts.showOnClick && 1 == e.closest("ul").dataSM("level") ? 1 : this.opts.showTimeout) } this.$root.triggerHandler("mouseenter.smapi", e[0]) } }, itemFocus: function (t) { var e = $(t.currentTarget); this.handleItemEvents(e) && (!this.focusActivated || this.isTouchMode() && e.dataSM("mousedown") || this.activatedItems.length && this.activatedItems[this.activatedItems.length - 1][0] == e[0] || this.itemActivate(e, !0), this.$root.triggerHandler("focus.smapi", e[0])) }, itemLeave: function (t) { var e = $(t.currentTarget); this.handleItemEvents(e) && (this.isTouchMode() || (e[0].blur(), this.showTimeout && (clearTimeout(this.showTimeout), this.showTimeout = 0)), e.removeDataSM("mousedown"), this.$root.triggerHandler("mouseleave.smapi", e[0])) }, menuHide: function (t) { if (this.$root.triggerHandler("beforehide.smapi", t[0]) !== !1 && (t.stop(!0, !0), "none" != t.css("display"))) { var e = function () { t.css("z-index", "") }; this.isCollapsible() ? this.opts.collapsibleHideFunction ? this.opts.collapsibleHideFunction.call(this, t, e) : t.hide(this.opts.collapsibleHideDuration, e) : this.opts.hideFunction ? this.opts.hideFunction.call(this, t, e) : t.hide(this.opts.hideDuration, e), t.dataSM("ie-shim") && t.dataSM("ie-shim").remove().css({ "-webkit-transform": "", transform: "" }), t.dataSM("scroll") && (this.menuScrollStop(t), t.css({ "touch-action": "", "-ms-touch-action": "", "-webkit-transform": "", transform: "" }).unbind(".smartmenus_scroll").removeDataSM("scroll").dataSM("scroll-arrows").hide()), t.dataSM("parent-a").removeClass("highlighted").attr("aria-expanded", "false"), t.attr({ "aria-expanded": "false", "aria-hidden": "true" }); var i = t.dataSM("level"); this.activatedItems.splice(i - 1, 1), this.visibleSubMenus.splice($.inArray(t, this.visibleSubMenus), 1), this.$root.triggerHandler("hide.smapi", t[0]) } }, menuHideAll: function () { this.showTimeout && (clearTimeout(this.showTimeout), this.showTimeout = 0); for (var t = this.opts.isPopup ? 1 : 0, e = this.visibleSubMenus.length - 1; e >= t; e--)this.menuHide(this.visibleSubMenus[e]); this.opts.isPopup && (this.$root.stop(!0, !0), this.$root.is(":visible") && (this.opts.hideFunction ? this.opts.hideFunction.call(this, this.$root) : this.$root.hide(this.opts.hideDuration), this.$root.dataSM("ie-shim") && this.$root.dataSM("ie-shim").remove())), this.activatedItems = [], this.visibleSubMenus = [], this.clickActivated = !1, this.focusActivated = !1, this.zIndexInc = 0, this.$root.triggerHandler("hideAll.smapi") }, menuHideSubMenus: function (t) { for (var e = this.activatedItems.length - 1; e >= t; e--) { var i = this.activatedItems[e].dataSM("sub"); i && this.menuHide(i) } }, menuIframeShim: function (t) { IE && this.opts.overlapControlsInIE && !t.dataSM("ie-shim") && t.dataSM("ie-shim", $("<iframe/>").attr({ src: "javascript:0", tabindex: -9 }).css({ position: "absolute", top: "auto", left: "0", opacity: 0, border: "0" })) }, menuInit: function (t) { if (!t.dataSM("in-mega")) { t.hasClass("mega-menu") && t.find("ul").dataSM("in-mega", !0); for (var e = 2, i = t[0]; (i = i.parentNode.parentNode) != this.$root[0];)e++; var s = t.prevAll("a").eq(-1); s.length || (s = t.prevAll().find("a").eq(-1)), s.addClass("has-submenu").dataSM("sub", t), t.dataSM("parent-a", s).dataSM("level", e).parent().dataSM("sub", t); var o = s.attr("id") || this.accessIdPrefix + ++this.idInc, a = t.attr("id") || this.accessIdPrefix + ++this.idInc; s.attr({ id: o, "aria-haspopup": "true", "aria-controls": a, "aria-expanded": "false" }), t.attr({ id: a, role: "group", "aria-hidden": "true", "aria-labelledby": o, "aria-expanded": "false" }), this.opts.subIndicators && s[this.opts.subIndicatorsPos](this.$subArrow.clone()) } }, menuPosition: function (t) { var e, i, s = t.dataSM("parent-a"), o = s.closest("li"), a = o.parent(), n = t.dataSM("level"), r = this.getWidth(t), h = this.getHeight(t), u = s.offset(), l = u.left, c = u.top, d = this.getWidth(s), m = this.getHeight(s), p = $(window), f = p.scrollLeft(), v = p.scrollTop(), S = this.getViewportWidth(), b = this.getViewportHeight(), g = a.parent().is("[data-sm-horizontal-sub]") || 2 == n && !a.hasClass("sm-vertical"), M = this.opts.rightToLeftSubMenus && !o.is("[data-sm-reverse]") || !this.opts.rightToLeftSubMenus && o.is("[data-sm-reverse]"), w = 2 == n ? this.opts.mainMenuSubOffsetX : this.opts.subMenusSubOffsetX, T = 2 == n ? this.opts.mainMenuSubOffsetY : this.opts.subMenusSubOffsetY; if (g ? (e = M ? d - r - w : w, i = this.opts.bottomToTopSubMenus ? -h - T : m + T) : (e = M ? w - r : d - w, i = this.opts.bottomToTopSubMenus ? m - T - h : T), this.opts.keepInViewport) { var y = l + e, I = c + i; if (M && f > y ? e = g ? f - y + e : d - w : !M && y + r > f + S && (e = g ? f + S - r - y + e : w - r), g || (b > h && I + h > v + b ? i += v + b - h - I : (h >= b || v > I) && (i += v - I)), g && (I + h > v + b + .49 || v > I) || !g && h > b + .49) { var x = this; t.dataSM("scroll-arrows") || t.dataSM("scroll-arrows", $([$('<span class="scroll-up"><span class="scroll-up-arrow"></span></span>')[0], $('<span class="scroll-down"><span class="scroll-down-arrow"></span></span>')[0]]).bind({ mouseenter: function () { t.dataSM("scroll").up = $(this).hasClass("scroll-up"), x.menuScroll(t) }, mouseleave: function (e) { x.menuScrollStop(t), x.menuScrollOut(t, e) }, "mousewheel DOMMouseScroll": function (t) { t.preventDefault() } }).insertAfter(t)); var C = ".smartmenus_scroll"; t.dataSM("scroll", { y: this.cssTransforms3d ? 0 : i - m, step: 1, itemH: m, subH: h, arrowDownH: this.getHeight(t.dataSM("scroll-arrows").eq(1)) }).bind(getEventsNS([["mouseover", function (e) { x.menuScrollOver(t, e) }], ["mouseout", function (e) { x.menuScrollOut(t, e) }], ["mousewheel DOMMouseScroll", function (e) { x.menuScrollMousewheel(t, e) }]], C)).dataSM("scroll-arrows").css({ top: "auto", left: "0", marginLeft: e + (parseInt(t.css("border-left-width")) || 0), width: r - (parseInt(t.css("border-left-width")) || 0) - (parseInt(t.css("border-right-width")) || 0), zIndex: t.css("z-index") }).eq(g && this.opts.bottomToTopSubMenus ? 0 : 1).show(), this.isFixed() && t.css({ "touch-action": "none", "-ms-touch-action": "none" }).bind(getEventsNS([[touchEvents ? "touchstart touchmove touchend" : "pointerdown pointermove pointerup MSPointerDown MSPointerMove MSPointerUp", function (e) { x.menuScrollTouch(t, e) }]], C)) } } t.css({ top: "auto", left: "0", marginLeft: e, marginTop: i - m }), this.menuIframeShim(t), t.dataSM("ie-shim") && t.dataSM("ie-shim").css({ zIndex: t.css("z-index"), width: r, height: h, marginLeft: e, marginTop: i - m }) }, menuScroll: function (t, e, i) { var s, o = t.dataSM("scroll"), a = t.dataSM("scroll-arrows"), n = o.up ? o.upEnd : o.downEnd; if (!e && o.momentum) { if (o.momentum *= .92, s = o.momentum, .5 > s) return void this.menuScrollStop(t) } else s = i || (e || !this.opts.scrollAccelerate ? this.opts.scrollStep : Math.floor(o.step)); var r = t.dataSM("level"); if (this.activatedItems[r - 1] && this.activatedItems[r - 1].dataSM("sub") && this.activatedItems[r - 1].dataSM("sub").is(":visible") && this.menuHideSubMenus(r - 1), o.y = o.up && n <= o.y || !o.up && n >= o.y ? o.y : Math.abs(n - o.y) > s ? o.y + (o.up ? s : -s) : n, t.add(t.dataSM("ie-shim")).css(this.cssTransforms3d ? { "-webkit-transform": "translate3d(0, " + o.y + "px, 0)", transform: "translate3d(0, " + o.y + "px, 0)" } : { marginTop: o.y }), mouse && (o.up && o.y > o.downEnd || !o.up && o.y < o.upEnd) && a.eq(o.up ? 1 : 0).show(), o.y == n) mouse && a.eq(o.up ? 0 : 1).hide(), this.menuScrollStop(t); else if (!e) { this.opts.scrollAccelerate && o.step < this.opts.scrollStep && (o.step += .2); var h = this; this.scrollTimeout = requestAnimationFrame(function () { h.menuScroll(t) }) } }, menuScrollMousewheel: function (t, e) { if (this.getClosestMenu(e.target) == t[0]) { e = e.originalEvent; var i = (e.wheelDelta || -e.detail) > 0; t.dataSM("scroll-arrows").eq(i ? 0 : 1).is(":visible") && (t.dataSM("scroll").up = i, this.menuScroll(t, !0)) } e.preventDefault() }, menuScrollOut: function (t, e) { mouse && (/^scroll-(up|down)/.test((e.relatedTarget || "").className) || (t[0] == e.relatedTarget || $.contains(t[0], e.relatedTarget)) && this.getClosestMenu(e.relatedTarget) == t[0] || t.dataSM("scroll-arrows").css("visibility", "hidden")) }, menuScrollOver: function (t, e) { if (mouse && !/^scroll-(up|down)/.test(e.target.className) && this.getClosestMenu(e.target) == t[0]) { this.menuScrollRefreshData(t); var i = t.dataSM("scroll"), s = $(window).scrollTop() - t.dataSM("parent-a").offset().top - i.itemH; t.dataSM("scroll-arrows").eq(0).css("margin-top", s).end().eq(1).css("margin-top", s + this.getViewportHeight() - i.arrowDownH).end().css("visibility", "visible") } }, menuScrollRefreshData: function (t) { var e = t.dataSM("scroll"), i = $(window).scrollTop() - t.dataSM("parent-a").offset().top - e.itemH; this.cssTransforms3d && (i = -(parseFloat(t.css("margin-top")) - i)), $.extend(e, { upEnd: i, downEnd: i + this.getViewportHeight() - e.subH }) }, menuScrollStop: function (t) { return this.scrollTimeout ? (cancelAnimationFrame(this.scrollTimeout), this.scrollTimeout = 0, t.dataSM("scroll").step = 1, !0) : void 0 }, menuScrollTouch: function (t, e) { if (e = e.originalEvent, isTouchEvent(e)) { var i = this.getTouchPoint(e); if (this.getClosestMenu(i.target) == t[0]) { var s = t.dataSM("scroll"); if (/(start|down)$/i.test(e.type)) this.menuScrollStop(t) ? (e.preventDefault(), this.$touchScrollingSub = t) : this.$touchScrollingSub = null, this.menuScrollRefreshData(t), $.extend(s, { touchStartY: i.pageY, touchStartTime: e.timeStamp }); else if (/move$/i.test(e.type)) { var o = void 0 !== s.touchY ? s.touchY : s.touchStartY; if (void 0 !== o && o != i.pageY) { this.$touchScrollingSub = t; var a = o < i.pageY; void 0 !== s.up && s.up != a && $.extend(s, { touchStartY: i.pageY, touchStartTime: e.timeStamp }), $.extend(s, { up: a, touchY: i.pageY }), this.menuScroll(t, !0, Math.abs(i.pageY - o)) } e.preventDefault() } else void 0 !== s.touchY && ((s.momentum = 15 * Math.pow(Math.abs(i.pageY - s.touchStartY) / (e.timeStamp - s.touchStartTime), 2)) && (this.menuScrollStop(t), this.menuScroll(t), e.preventDefault()), delete s.touchY) } } }, menuShow: function (t) { if ((t.dataSM("beforefirstshowfired") || (t.dataSM("beforefirstshowfired", !0), this.$root.triggerHandler("beforefirstshow.smapi", t[0]) !== !1)) && this.$root.triggerHandler("beforeshow.smapi", t[0]) !== !1 && (t.dataSM("shown-before", !0).stop(!0, !0), !t.is(":visible"))) { var e = t.dataSM("parent-a"); if ((this.opts.keepHighlighted || this.isCollapsible()) && e.addClass("highlighted"), this.isCollapsible()) t.removeClass("sm-nowrap").css({ zIndex: "", width: "auto", minWidth: "", maxWidth: "", top: "", left: "", marginLeft: "", marginTop: "" }); else { if (t.css("z-index", this.zIndexInc = (this.zIndexInc || this.getStartZIndex()) + 1), (this.opts.subMenusMinWidth || this.opts.subMenusMaxWidth) && (t.css({ width: "auto", minWidth: "", maxWidth: "" }).addClass("sm-nowrap"), this.opts.subMenusMinWidth && t.css("min-width", this.opts.subMenusMinWidth), this.opts.subMenusMaxWidth)) { var i = this.getWidth(t); t.css("max-width", this.opts.subMenusMaxWidth), i > this.getWidth(t) && t.removeClass("sm-nowrap").css("width", this.opts.subMenusMaxWidth) } this.menuPosition(t), t.dataSM("ie-shim") && t.dataSM("ie-shim").insertBefore(t) } var s = function () { t.css("overflow", "") }; this.isCollapsible() ? this.opts.collapsibleShowFunction ? this.opts.collapsibleShowFunction.call(this, t, s) : t.show(this.opts.collapsibleShowDuration, s) : this.opts.showFunction ? this.opts.showFunction.call(this, t, s) : t.show(this.opts.showDuration, s), e.attr("aria-expanded", "true"), t.attr({ "aria-expanded": "true", "aria-hidden": "false" }), this.visibleSubMenus.push(t), this.$root.triggerHandler("show.smapi", t[0]) } }, popupHide: function (t) { this.hideTimeout && (clearTimeout(this.hideTimeout), this.hideTimeout = 0); var e = this; this.hideTimeout = setTimeout(function () { e.menuHideAll() }, t ? 1 : this.opts.hideTimeout) }, popupShow: function (t, e) { if (!this.opts.isPopup) return void alert('SmartMenus jQuery Error:\n\nIf you want to show this menu via the "popupShow" method, set the isPopup:true option.'); if (this.hideTimeout && (clearTimeout(this.hideTimeout), this.hideTimeout = 0), this.$root.dataSM("shown-before", !0).stop(!0, !0), !this.$root.is(":visible")) { this.$root.css({ left: t, top: e }), this.menuIframeShim(this.$root), this.$root.dataSM("ie-shim") && this.$root.dataSM("ie-shim").css({ zIndex: this.$root.css("z-index"), width: this.getWidth(this.$root), height: this.getHeight(this.$root), left: t, top: e }).insertBefore(this.$root); var i = this, s = function () { i.$root.css("overflow", "") }; this.opts.showFunction ? this.opts.showFunction.call(this, this.$root, s) : this.$root.show(this.opts.showDuration, s), this.visibleSubMenus[0] = this.$root } }, refresh: function () { this.destroy(!0), this.init(!0) }, rootKeyDown: function (t) { if (this.handleEvents()) switch (t.keyCode) { case 27: var e = this.activatedItems[0]; if (e) { this.menuHideAll(), e[0].focus(); var i = e.dataSM("sub"); i && this.menuHide(i) } break; case 32: var s = $(t.target); if (s.is("a") && this.handleItemEvents(s)) { var i = s.dataSM("sub"); i && !i.is(":visible") && (this.itemClick({ currentTarget: t.target }), t.preventDefault()) } } }, rootOut: function (t) { if (this.handleEvents() && !this.isTouchMode() && t.target != this.$root[0] && (this.hideTimeout && (clearTimeout(this.hideTimeout), this.hideTimeout = 0), !this.opts.showOnClick || !this.opts.hideOnClick)) { var e = this; this.hideTimeout = setTimeout(function () { e.menuHideAll() }, this.opts.hideTimeout) } }, rootOver: function (t) { this.handleEvents() && !this.isTouchMode() && t.target != this.$root[0] && this.hideTimeout && (clearTimeout(this.hideTimeout), this.hideTimeout = 0) }, winResize: function (t) { if (this.handleEvents()) { if (!("onorientationchange" in window) || "orientationchange" == t.type) { var e = this.isCollapsible(); this.wasCollapsible && e || (this.activatedItems.length && this.activatedItems[this.activatedItems.length - 1][0].blur(), this.menuHideAll()), this.wasCollapsible = e } } else if (this.$disableOverlay) { var i = this.$root.offset(); this.$disableOverlay.css({ top: i.top, left: i.left, width: this.$root.outerWidth(), height: this.$root.outerHeight() }) } } } }), $.fn.dataSM = function (t, e) { return e ? this.data(t + "_smartmenus", e) : this.data(t + "_smartmenus") }, $.fn.removeDataSM = function (t) { return this.removeData(t + "_smartmenus") }, $.fn.smartmenus = function (options) { if ("string" == typeof options) { var args = arguments, method = options; return Array.prototype.shift.call(args), this.each(function () { var t = $(this).data("smartmenus"); t && t[method] && t[method].apply(t, args) }) } var dataOpts = this.data("sm-options") || null; if (dataOpts) try { dataOpts = eval("(" + dataOpts + ")") } catch (e) { dataOpts = null, alert('ERROR\n\nSmartMenus jQuery init:\nInvalid "data-sm-options" attribute value syntax.') } return this.each(function () { new $.SmartMenus(this, $.extend({}, $.fn.smartmenus.defaults, options, dataOpts)) }) }, $.fn.smartmenus.defaults = { isPopup: !1, mainMenuSubOffsetX: 0, mainMenuSubOffsetY: 0, subMenusSubOffsetX: 0, subMenusSubOffsetY: 0, subMenusMinWidth: "14em", subMenusMaxWidth: "20em", subIndicators: !0, subIndicatorsPos: "prepend", subIndicatorsText: "+", scrollStep: 30, scrollAccelerate: !0, showTimeout: 250, hideTimeout: 500, showDuration: 0, showFunction: null, hideDuration: 0, hideFunction: function (t, e) { t.fadeOut(200, e) }, collapsibleShowDuration: 0, collapsibleShowFunction: function (t, e) { t.slideDown(200, e) }, collapsibleHideDuration: 0, collapsibleHideFunction: function (t, e) { t.slideUp(200, e) }, showOnClick: !1, hideOnClick: !0, noMouseOver: !1, keepInViewport: !0, keepHighlighted: !0, markCurrentItem: !1, markCurrentTree: !0, rightToLeftSubMenus: !1, bottomToTopSubMenus: !1, overlapControlsInIE: !0 }, $ });


; (function ($) {
    $.flexslider = function (el, options) {
        var slider = $(el); slider.vars = $.extend({}, $.flexslider.defaults, options); var namespace = slider.vars.namespace, msGesture = window.navigator && window.navigator.msPointerEnabled && window.MSGesture, touch = (("ontouchstart" in window) || msGesture || window.DocumentTouch && document instanceof DocumentTouch) && slider.vars.touch, eventType = "click touchend MSPointerUp keyup", watchedEvent = "", watchedEventClearTimer, vertical = slider.vars.direction === "vertical", reverse = slider.vars.reverse, carousel = (slider.vars.itemWidth > 0), fade = slider.vars.animation === "fade", asNav = slider.vars.asNavFor !== "", methods = {}, focused = true; $.data(el, "flexslider", slider); methods = {
            init: function () {
                slider.animating = false; slider.currentSlide = parseInt((slider.vars.startAt ? slider.vars.startAt : 0), 10); if (isNaN(slider.currentSlide)) { slider.currentSlide = 0; }
                slider.animatingTo = slider.currentSlide; slider.atEnd = (slider.currentSlide === 0 || slider.currentSlide === slider.last); slider.containerSelector = slider.vars.selector.substr(0, slider.vars.selector.search(' ')); slider.slides = $(slider.vars.selector, slider); slider.container = $(slider.containerSelector, slider); slider.count = slider.slides.length; slider.syncExists = $(slider.vars.sync).length > 0; if (slider.vars.animation === "slide") { slider.vars.animation = "swing"; }
                slider.prop = (vertical) ? "top" : "marginLeft"; slider.args = {}; slider.manualPause = false; slider.stopped = false; slider.started = false; slider.startTimeout = null; slider.transitions = !slider.vars.video && !fade && slider.vars.useCSS && (function () {
                    var obj = document.createElement('div'), props = ['perspectiveProperty', 'WebkitPerspective', 'MozPerspective', 'OPerspective', 'msPerspective']; for (var i in props) { if (obj.style[props[i]] !== undefined) { slider.pfx = props[i].replace('Perspective', '').toLowerCase(); slider.prop = "-" + slider.pfx + "-transform"; return true; } }
                    return false;
                }()); slider.ensureAnimationEnd = ''; if (slider.vars.controlsContainer !== "") slider.controlsContainer = $(slider.vars.controlsContainer).length > 0 && $(slider.vars.controlsContainer); if (slider.vars.manualControls !== "") slider.manualControls = $(slider.vars.manualControls).length > 0 && $(slider.vars.manualControls); if (slider.vars.randomize) { slider.slides.sort(function () { return (Math.round(Math.random()) - 0.5); }); slider.container.empty().append(slider.slides); }
                slider.doMath(); slider.setup("init"); if (slider.vars.controlNav) { methods.controlNav.setup(); }
                if (slider.vars.directionNav) { methods.directionNav.setup(); }
                if (slider.vars.keyboard && ($(slider.containerSelector).length === 1 || slider.vars.multipleKeyboard)) { $(document).bind('keyup', function (event) { var keycode = event.keyCode; if (!slider.animating && (keycode === 39 || keycode === 37)) { var target = (keycode === 39) ? slider.getTarget('next') : (keycode === 37) ? slider.getTarget('prev') : false; slider.flexAnimate(target, slider.vars.pauseOnAction); } }); }
                if (slider.vars.mousewheel) { slider.bind('mousewheel', function (event, delta, deltaX, deltaY) { event.preventDefault(); var target = (delta < 0) ? slider.getTarget('next') : slider.getTarget('prev'); slider.flexAnimate(target, slider.vars.pauseOnAction); }); }
                if (slider.vars.pausePlay) { methods.pausePlay.setup(); }
                if (slider.vars.slideshow && slider.vars.pauseInvisible) { methods.pauseInvisible.init(); }
                if (slider.vars.slideshow) {
                    if (slider.vars.pauseOnHover) { slider.hover(function () { if (!slider.manualPlay && !slider.manualPause) { slider.pause(); } }, function () { if (!slider.manualPause && !slider.manualPlay && !slider.stopped) { slider.play(); } }); }
                    if (!slider.vars.pauseInvisible || !methods.pauseInvisible.isHidden()) { (slider.vars.initDelay > 0) ? slider.startTimeout = setTimeout(slider.play, slider.vars.initDelay) : slider.play(); }
                }
                if (asNav) { methods.asNav.setup(); }
                if (touch && slider.vars.touch) { methods.touch(); }
                if (!fade || (fade && slider.vars.smoothHeight)) { $(window).bind("resize orientationchange focus", methods.resize); }
                slider.find("img").attr("draggable", "false"); setTimeout(function () { slider.vars.start(slider); }, 200);
            }, asNav: { setup: function () { slider.asNav = true; slider.animatingTo = Math.floor(slider.currentSlide / slider.move); slider.currentItem = slider.currentSlide; slider.slides.removeClass(namespace + "active-slide").eq(slider.currentItem).addClass(namespace + "active-slide"); if (!msGesture) { slider.slides.on(eventType, function (e) { e.preventDefault(); var $slide = $(this), target = $slide.index(); var posFromLeft = $slide.offset().left - $(slider).scrollLeft(); if (posFromLeft <= 0 && $slide.hasClass(namespace + 'active-slide')) { slider.flexAnimate(slider.getTarget("prev"), true); } else if (!$(slider.vars.asNavFor).data('flexslider').animating && !$slide.hasClass(namespace + "active-slide")) { slider.direction = (slider.currentItem < target) ? "next" : "prev"; slider.flexAnimate(target, slider.vars.pauseOnAction, false, true, true); } }); } else { el._slider = slider; slider.slides.each(function () { var that = this; that._gesture = new MSGesture(); that._gesture.target = that; that.addEventListener("MSPointerDown", function (e) { e.preventDefault(); if (e.currentTarget._gesture) { e.currentTarget._gesture.addPointer(e.pointerId); } }, false); that.addEventListener("MSGestureTap", function (e) { e.preventDefault(); var $slide = $(this), target = $slide.index(); if (!$(slider.vars.asNavFor).data('flexslider').animating && !$slide.hasClass('active')) { slider.direction = (slider.currentItem < target) ? "next" : "prev"; slider.flexAnimate(target, slider.vars.pauseOnAction, false, true, true); } }); }); } } }, controlNav: {
                setup: function () { if (!slider.manualControls) { methods.controlNav.setupPaging(); } else { methods.controlNav.setupManual(); } }, setupPaging: function () {
                    var type = (slider.vars.controlNav === "thumbnails") ? 'control-thumbs' : 'control-paging', j = 1, item, slide; slider.controlNavScaffold = $('<ol class="' + namespace + 'control-nav ' + namespace + type + '"></ol>'); if (slider.pagingCount > 1) {
                        for (var i = 0; i < slider.pagingCount; i++) {
                            slide = slider.slides.eq(i); item = (slider.vars.controlNav === "thumbnails") ? '<img src="' + slide.attr('data-thumb') + '"/>' : '<a>' + j + '</a>'; if ('thumbnails' === slider.vars.controlNav && true === slider.vars.thumbCaptions) { var captn = slide.attr('data-thumbcaption'); if ('' != captn && undefined != captn) { item += '<span class="' + namespace + 'caption">' + captn + '</span>'; } }
                            slider.controlNavScaffold.append('<li>' + item + '</li>'); j++;
                        }
                    }
                    (slider.controlsContainer) ? $(slider.controlsContainer).append(slider.controlNavScaffold) : slider.append(slider.controlNavScaffold); methods.controlNav.set(); methods.controlNav.active(); slider.controlNavScaffold.delegate('a, img', eventType, function (event) {
                        event.preventDefault(); if (watchedEvent === "" || watchedEvent === event.type) { var $this = $(this), target = slider.controlNav.index($this); if (!$this.hasClass(namespace + 'active')) { slider.direction = (target > slider.currentSlide) ? "next" : "prev"; slider.flexAnimate(target, slider.vars.pauseOnAction); } }
                        if (watchedEvent === "") { watchedEvent = event.type; }
                        methods.setToClearWatchedEvent();
                    });
                }, setupManual: function () {
                    slider.controlNav = slider.manualControls; methods.controlNav.active(); slider.controlNav.bind(eventType, function (event) {
                        event.preventDefault(); if (watchedEvent === "" || watchedEvent === event.type) { var $this = $(this), target = slider.controlNav.index($this); if (!$this.hasClass(namespace + 'active')) { (target > slider.currentSlide) ? slider.direction = "next" : slider.direction = "prev"; slider.flexAnimate(target, slider.vars.pauseOnAction); } }
                        if (watchedEvent === "") { watchedEvent = event.type; }
                        methods.setToClearWatchedEvent();
                    });
                }, set: function () { var selector = (slider.vars.controlNav === "thumbnails") ? 'img' : 'a'; slider.controlNav = $('.' + namespace + 'control-nav li ' + selector, (slider.controlsContainer) ? slider.controlsContainer : slider); }, active: function () { slider.controlNav.removeClass(namespace + "active").eq(slider.animatingTo).addClass(namespace + "active"); }, update: function (action, pos) {
                    if (slider.pagingCount > 1 && action === "add") { slider.controlNavScaffold.append($('<li><a>' + slider.count + '</a></li>')); } else if (slider.pagingCount === 1) { slider.controlNavScaffold.find('li').remove(); } else { slider.controlNav.eq(pos).closest('li').remove(); }
                    methods.controlNav.set(); (slider.pagingCount > 1 && slider.pagingCount !== slider.controlNav.length) ? slider.update(pos, action) : methods.controlNav.active();
                }
            }, directionNav: {
                setup: function () {
                    var directionNavScaffold = $('<ul class="' + namespace + 'direction-nav"><li class="' + namespace + 'nav-prev"><a class="' + namespace + 'prev" href="#">' + slider.vars.prevText + '</a></li><li class="' + namespace + 'nav-next"><a class="' + namespace + 'next" href="#">' + slider.vars.nextText + '</a></li></ul>'); if (slider.controlsContainer) { $(slider.controlsContainer).append(directionNavScaffold); slider.directionNav = $('.' + namespace + 'direction-nav li a', slider.controlsContainer); } else { slider.append(directionNavScaffold); slider.directionNav = $('.' + namespace + 'direction-nav li a', slider); }
                    methods.directionNav.update(); slider.directionNav.bind(eventType, function (event) {
                        event.preventDefault(); var target; if (watchedEvent === "" || watchedEvent === event.type) { target = ($(this).hasClass(namespace + 'next')) ? slider.getTarget('next') : slider.getTarget('prev'); slider.flexAnimate(target, slider.vars.pauseOnAction); }
                        if (watchedEvent === "") { watchedEvent = event.type; }
                        methods.setToClearWatchedEvent();
                    });
                }, update: function () { var disabledClass = namespace + 'disabled'; if (slider.pagingCount === 1) { slider.directionNav.addClass(disabledClass).attr('tabindex', '-1'); } else if (!slider.vars.animationLoop) { if (slider.animatingTo === 0) { slider.directionNav.removeClass(disabledClass).filter('.' + namespace + "prev").addClass(disabledClass).attr('tabindex', '-1'); } else if (slider.animatingTo === slider.last) { slider.directionNav.removeClass(disabledClass).filter('.' + namespace + "next").addClass(disabledClass).attr('tabindex', '-1'); } else { slider.directionNav.removeClass(disabledClass).removeAttr('tabindex'); } } else { slider.directionNav.removeClass(disabledClass).removeAttr('tabindex'); } }
            }, pausePlay: {
                setup: function () {
                    var pausePlayScaffold = $('<div class="' + namespace + 'pauseplay"><a></a></div>'); if (slider.controlsContainer) { slider.controlsContainer.append(pausePlayScaffold); slider.pausePlay = $('.' + namespace + 'pauseplay a', slider.controlsContainer); } else { slider.append(pausePlayScaffold); slider.pausePlay = $('.' + namespace + 'pauseplay a', slider); }
                    methods.pausePlay.update((slider.vars.slideshow) ? namespace + 'pause' : namespace + 'play'); slider.pausePlay.bind(eventType, function (event) {
                        event.preventDefault(); if (watchedEvent === "" || watchedEvent === event.type) { if ($(this).hasClass(namespace + 'pause')) { slider.manualPause = true; slider.manualPlay = false; slider.pause(); } else { slider.manualPause = false; slider.manualPlay = true; slider.play(); } }
                        if (watchedEvent === "") { watchedEvent = event.type; }
                        methods.setToClearWatchedEvent();
                    });
                }, update: function (state) { (state === "play") ? slider.pausePlay.removeClass(namespace + 'pause').addClass(namespace + 'play').html(slider.vars.playText) : slider.pausePlay.removeClass(namespace + 'play').addClass(namespace + 'pause').html(slider.vars.pauseText); }
            }, touch: function () {
                var startX, startY, offset, cwidth, dx, startT, scrolling = false, localX = 0, localY = 0, accDx = 0; if (!msGesture) {
                    el.addEventListener('touchstart', onTouchStart, false); function onTouchStart(e) { if (slider.animating) { e.preventDefault(); } else if ((window.navigator.msPointerEnabled) || e.touches.length === 1) { slider.pause(); cwidth = (vertical) ? slider.h : slider.w; startT = Number(new Date()); localX = e.touches[0].pageX; localY = e.touches[0].pageY; offset = (carousel && reverse && slider.animatingTo === slider.last) ? 0 : (carousel && reverse) ? slider.limit - (((slider.itemW + slider.vars.itemMargin) * slider.move) * slider.animatingTo) : (carousel && slider.currentSlide === slider.last) ? slider.limit : (carousel) ? ((slider.itemW + slider.vars.itemMargin) * slider.move) * slider.currentSlide : (reverse) ? (slider.last - slider.currentSlide + slider.cloneOffset) * cwidth : (slider.currentSlide + slider.cloneOffset) * cwidth; startX = (vertical) ? localY : localX; startY = (vertical) ? localX : localY; el.addEventListener('touchmove', onTouchMove, false); el.addEventListener('touchend', onTouchEnd, false); } }
                    function onTouchMove(e) {
                        localX = e.touches[0].pageX; localY = e.touches[0].pageY; dx = (vertical) ? startX - localY : startX - localX; scrolling = (vertical) ? (Math.abs(dx) < Math.abs(localX - startY)) : (Math.abs(dx) < Math.abs(localY - startY)); var fxms = 500; if (!scrolling || Number(new Date()) - startT > fxms) {
                            e.preventDefault(); if (!fade && slider.transitions) {
                                if (!slider.vars.animationLoop) { dx = dx / ((slider.currentSlide === 0 && dx < 0 || slider.currentSlide === slider.last && dx > 0) ? (Math.abs(dx) / cwidth + 2) : 1); }
                                slider.setProps(offset + dx, "setTouch");
                            }
                        }
                    }
                    function onTouchEnd(e) {
                        el.removeEventListener('touchmove', onTouchMove, false); if (slider.animatingTo === slider.currentSlide && !scrolling && !(dx === null)) { var updateDx = (reverse) ? -dx : dx, target = (updateDx > 0) ? slider.getTarget('next') : slider.getTarget('prev'); if (slider.canAdvance(target) && (Number(new Date()) - startT < 550 && Math.abs(updateDx) > 50 || Math.abs(updateDx) > cwidth / 2)) { slider.flexAnimate(target, slider.vars.pauseOnAction); } else { if (!fade) { slider.flexAnimate(slider.currentSlide, slider.vars.pauseOnAction, true); } } }
                        el.removeEventListener('touchend', onTouchEnd, false); startX = null; startY = null; dx = null; offset = null;
                    }
                } else {
                    el.style.msTouchAction = "none"; el._gesture = new MSGesture(); el._gesture.target = el; el.addEventListener("MSPointerDown", onMSPointerDown, false); el._slider = slider; el.addEventListener("MSGestureChange", onMSGestureChange, false); el.addEventListener("MSGestureEnd", onMSGestureEnd, false); function onMSPointerDown(e) { e.stopPropagation(); if (slider.animating) { e.preventDefault(); } else { slider.pause(); el._gesture.addPointer(e.pointerId); accDx = 0; cwidth = (vertical) ? slider.h : slider.w; startT = Number(new Date()); offset = (carousel && reverse && slider.animatingTo === slider.last) ? 0 : (carousel && reverse) ? slider.limit - (((slider.itemW + slider.vars.itemMargin) * slider.move) * slider.animatingTo) : (carousel && slider.currentSlide === slider.last) ? slider.limit : (carousel) ? ((slider.itemW + slider.vars.itemMargin) * slider.move) * slider.currentSlide : (reverse) ? (slider.last - slider.currentSlide + slider.cloneOffset) * cwidth : (slider.currentSlide + slider.cloneOffset) * cwidth; } }
                    function onMSGestureChange(e) {
                        e.stopPropagation(); var slider = e.target._slider; if (!slider) { return; }
                        var transX = -e.translationX, transY = -e.translationY; accDx = accDx + ((vertical) ? transY : transX); dx = accDx; scrolling = (vertical) ? (Math.abs(accDx) < Math.abs(-transX)) : (Math.abs(accDx) < Math.abs(-transY)); if (e.detail === e.MSGESTURE_FLAG_INERTIA) { setImmediate(function () { el._gesture.stop(); }); return; }
                        if (!scrolling || Number(new Date()) - startT > 500) {
                            e.preventDefault(); if (!fade && slider.transitions) {
                                if (!slider.vars.animationLoop) { dx = accDx / ((slider.currentSlide === 0 && accDx < 0 || slider.currentSlide === slider.last && accDx > 0) ? (Math.abs(accDx) / cwidth + 2) : 1); }
                                slider.setProps(offset + dx, "setTouch");
                            }
                        }
                    }
                    function onMSGestureEnd(e) {
                        e.stopPropagation(); var slider = e.target._slider; if (!slider) { return; }
                        if (slider.animatingTo === slider.currentSlide && !scrolling && !(dx === null)) { var updateDx = (reverse) ? -dx : dx, target = (updateDx > 0) ? slider.getTarget('next') : slider.getTarget('prev'); if (slider.canAdvance(target) && (Number(new Date()) - startT < 550 && Math.abs(updateDx) > 50 || Math.abs(updateDx) > cwidth / 2)) { slider.flexAnimate(target, slider.vars.pauseOnAction); } else { if (!fade) { slider.flexAnimate(slider.currentSlide, slider.vars.pauseOnAction, true); } } }
                        startX = null; startY = null; dx = null; offset = null; accDx = 0;
                    }
                }
            }, resize: function () {
                if (!slider.animating && slider.is(':visible')) {
                    if (!carousel) { slider.doMath(); }
                    if (fade) { methods.smoothHeight(); } else if (carousel) { slider.slides.width(slider.computedW); slider.update(slider.pagingCount); slider.setProps(); }
                    else if (vertical) { slider.viewport.height(slider.h); slider.setProps(slider.h, "setTotal"); } else {
                        if (slider.vars.smoothHeight) { methods.smoothHeight(); }
                        slider.newSlides.width(slider.computedW); slider.setProps(slider.computedW, "setTotal");
                    }
                }
            }, smoothHeight: function (dur) { if (!vertical || fade) { var $obj = (fade) ? slider : slider.viewport; (dur) ? $obj.animate({ "height": slider.slides.eq(slider.animatingTo).height() }, dur) : $obj.height(slider.slides.eq(slider.animatingTo).height()); } }, sync: function (action) { var $obj = $(slider.vars.sync).data("flexslider"), target = slider.animatingTo; switch (action) { case "animate": $obj.flexAnimate(target, slider.vars.pauseOnAction, false, true); break; case "play": if (!$obj.playing && !$obj.asNav) { $obj.play(); } break; case "pause": $obj.pause(); break; } }, uniqueID: function ($clone) { $clone.filter('[id]').add($clone.find('[id]')).each(function () { var $this = $(this); $this.attr('id', $this.attr('id') + '_clone'); }); return $clone; }, pauseInvisible: {
                visProp: null, init: function () {
                    var visProp = methods.pauseInvisible.getHiddenProp(); if (visProp) {
                        var evtname = visProp.replace(/[H|h]idden/, '') + 'visibilitychange'; document.addEventListener(evtname, function () {
                            if (methods.pauseInvisible.isHidden()) { if (slider.startTimeout) { clearTimeout(slider.startTimeout); } else { slider.pause(); } }
                            else { if (slider.started) { slider.play(); } else { if (slider.vars.initDelay > 0) { setTimeout(slider.play, slider.vars.initDelay); } else { slider.play(); } } }
                        });
                    }
                }, isHidden: function () {
                    var prop = methods.pauseInvisible.getHiddenProp(); if (!prop) { return false; }
                    return document[prop];
                }, getHiddenProp: function () {
                    var prefixes = ['webkit', 'moz', 'ms', 'o']; if ('hidden' in document) { return 'hidden'; }
                    for (var i = 0; i < prefixes.length; i++) { if ((prefixes[i] + 'Hidden') in document) { return prefixes[i] + 'Hidden'; } }
                    return null;
                }
            }, setToClearWatchedEvent: function () { clearTimeout(watchedEventClearTimer); watchedEventClearTimer = setTimeout(function () { watchedEvent = ""; }, 3000); }
        }; slider.flexAnimate = function (target, pause, override, withSync, fromNav) {
            if (!slider.vars.animationLoop && target !== slider.currentSlide) { slider.direction = (target > slider.currentSlide) ? "next" : "prev"; }
            if (asNav && slider.pagingCount === 1) slider.direction = (slider.currentItem < target) ? "next" : "prev"; if (!slider.animating && (slider.canAdvance(target, fromNav) || override) && slider.is(":visible")) {
                if (asNav && withSync) { var master = $(slider.vars.asNavFor).data('flexslider'); slider.atEnd = target === 0 || target === slider.count - 1; master.flexAnimate(target, true, false, true, fromNav); slider.direction = (slider.currentItem < target) ? "next" : "prev"; master.direction = slider.direction; if (Math.ceil((target + 1) / slider.visible) - 1 !== slider.currentSlide && target !== 0) { slider.currentItem = target; slider.slides.removeClass(namespace + "active-slide").eq(target).addClass(namespace + "active-slide"); target = Math.floor(target / slider.visible); } else { slider.currentItem = target; slider.slides.removeClass(namespace + "active-slide").eq(target).addClass(namespace + "active-slide"); return false; } }
                slider.animating = true; slider.animatingTo = target; if (pause) { slider.pause(); }
                slider.vars.before(slider); if (slider.syncExists && !fromNav) { methods.sync("animate"); }
                if (slider.vars.controlNav) { methods.controlNav.active(); }
                if (!carousel) { slider.slides.removeClass(namespace + 'active-slide').eq(target).addClass(namespace + 'active-slide'); }
                slider.atEnd = target === 0 || target === slider.last; if (slider.vars.directionNav) { methods.directionNav.update(); }
                if (target === slider.last) { slider.vars.end(slider); if (!slider.vars.animationLoop) { slider.pause(); } }
                if (!fade) {
                    var dimension = (vertical) ? slider.slides.filter(':first').height() : slider.computedW, margin, slideString, calcNext; if (carousel) { margin = slider.vars.itemMargin; calcNext = ((slider.itemW + margin) * slider.move) * slider.animatingTo; slideString = (calcNext > slider.limit && slider.visible !== 1) ? slider.limit : calcNext; } else if (slider.currentSlide === 0 && target === slider.count - 1 && slider.vars.animationLoop && slider.direction !== "next") { slideString = (reverse) ? (slider.count + slider.cloneOffset) * dimension : 0; } else if (slider.currentSlide === slider.last && target === 0 && slider.vars.animationLoop && slider.direction !== "prev") { slideString = (reverse) ? 0 : (slider.count + 1) * dimension; } else { slideString = (reverse) ? ((slider.count - 1) - target + slider.cloneOffset) * dimension : (target + slider.cloneOffset) * dimension; }
                    slider.setProps(slideString, "", slider.vars.animationSpeed); if (slider.transitions) {
                        if (!slider.vars.animationLoop || !slider.atEnd) { slider.animating = false; slider.currentSlide = slider.animatingTo; }
                        slider.container.unbind("webkitTransitionEnd transitionend"); slider.container.bind("webkitTransitionEnd transitionend", function () { clearTimeout(slider.ensureAnimationEnd); slider.wrapup(dimension); }); clearTimeout(slider.ensureAnimationEnd); slider.ensureAnimationEnd = setTimeout(function () { slider.wrapup(dimension); }, slider.vars.animationSpeed + 100);
                    } else { slider.container.animate(slider.args, slider.vars.animationSpeed, slider.vars.easing, function () { slider.wrapup(dimension); }); }
                } else { if (!touch) { slider.slides.eq(slider.currentSlide).css({ "zIndex": 1 }).animate({ "opacity": 0 }, slider.vars.animationSpeed, slider.vars.easing); slider.slides.eq(target).css({ "zIndex": 2 }).animate({ "opacity": 1 }, slider.vars.animationSpeed, slider.vars.easing, slider.wrapup); } else { slider.slides.eq(slider.currentSlide).css({ "opacity": 0, "zIndex": 1 }); slider.slides.eq(target).css({ "opacity": 1, "zIndex": 2 }); slider.wrapup(dimension); } }
                if (slider.vars.smoothHeight) { methods.smoothHeight(slider.vars.animationSpeed); }
            }
        }; slider.wrapup = function (dimension) {
            if (!fade && !carousel) { if (slider.currentSlide === 0 && slider.animatingTo === slider.last && slider.vars.animationLoop) { slider.setProps(dimension, "jumpEnd"); } else if (slider.currentSlide === slider.last && slider.animatingTo === 0 && slider.vars.animationLoop) { slider.setProps(dimension, "jumpStart"); } }
            slider.animating = false; slider.currentSlide = slider.animatingTo; slider.vars.after(slider);
        }; slider.animateSlides = function () { if (!slider.animating && focused) { slider.flexAnimate(slider.getTarget("next")); } }; slider.pause = function () {
            clearInterval(slider.animatedSlides); slider.animatedSlides = null; slider.playing = false; if (slider.vars.pausePlay) { methods.pausePlay.update("play"); }
            if (slider.syncExists) { methods.sync("pause"); }
        }; slider.play = function () {
            if (slider.playing) { clearInterval(slider.animatedSlides); }
            slider.animatedSlides = slider.animatedSlides || setInterval(slider.animateSlides, slider.vars.slideshowSpeed); slider.started = slider.playing = true; if (slider.vars.pausePlay) { methods.pausePlay.update("pause"); }
            if (slider.syncExists) { methods.sync("play"); }
        }; slider.stop = function () { slider.pause(); slider.stopped = true; }; slider.canAdvance = function (target, fromNav) { var last = (asNav) ? slider.pagingCount - 1 : slider.last; return (fromNav) ? true : (asNav && slider.currentItem === slider.count - 1 && target === 0 && slider.direction === "prev") ? true : (asNav && slider.currentItem === 0 && target === slider.pagingCount - 1 && slider.direction !== "next") ? false : (target === slider.currentSlide && !asNav) ? false : (slider.vars.animationLoop) ? true : (slider.atEnd && slider.currentSlide === 0 && target === last && slider.direction !== "next") ? false : (slider.atEnd && slider.currentSlide === last && target === 0 && slider.direction === "next") ? false : true; }; slider.getTarget = function (dir) { slider.direction = dir; if (dir === "next") { return (slider.currentSlide === slider.last) ? 0 : slider.currentSlide + 1; } else { return (slider.currentSlide === 0) ? slider.last : slider.currentSlide - 1; } }; slider.setProps = function (pos, special, dur) {
            var target = (function () { var posCheck = (pos) ? pos : ((slider.itemW + slider.vars.itemMargin) * slider.move) * slider.animatingTo, posCalc = (function () { if (carousel) { return (special === "setTouch") ? pos : (reverse && slider.animatingTo === slider.last) ? 0 : (reverse) ? slider.limit - (((slider.itemW + slider.vars.itemMargin) * slider.move) * slider.animatingTo) : (slider.animatingTo === slider.last) ? slider.limit : posCheck; } else { switch (special) { case "setTotal": return (reverse) ? ((slider.count - 1) - slider.currentSlide + slider.cloneOffset) * pos : (slider.currentSlide + slider.cloneOffset) * pos; case "setTouch": return (reverse) ? pos : pos; case "jumpEnd": return (reverse) ? pos : slider.count * pos; case "jumpStart": return (reverse) ? slider.count * pos : pos; default: return pos; } } }()); return (posCalc * -1) + "px"; }()); if (slider.transitions) { target = (vertical) ? "translate3d(0," + target + ",0)" : "translate3d(" + target + ",0,0)"; dur = (dur !== undefined) ? (dur / 1000) + "s" : "0s"; slider.container.css("-" + slider.pfx + "-transition-duration", dur); slider.container.css("transition-duration", dur); }
            slider.args[slider.prop] = target; if (slider.transitions || dur === undefined) { slider.container.css(slider.args); }
            slider.container.css('transform', target);
        }; slider.setup = function (type) {
            if (!fade) {
                var sliderOffset, arr; if (type === "init") { slider.viewport = $('<div class="' + namespace + 'viewport"></div>').css({ "overflow": "hidden", "position": "relative" }).appendTo(slider).append(slider.container); slider.cloneCount = 0; slider.cloneOffset = 0; if (reverse) { arr = $.makeArray(slider.slides).reverse(); slider.slides = $(arr); slider.container.empty().append(slider.slides); } }
                if (slider.vars.animationLoop && !carousel) {
                    slider.cloneCount = 2; slider.cloneOffset = 1; if (type !== "init") { slider.container.find('.clone').remove(); }
                    slider.container.append(methods.uniqueID(slider.slides.first().clone().addClass('clone')).attr('aria-hidden', 'true')).prepend(methods.uniqueID(slider.slides.last().clone().addClass('clone')).attr('aria-hidden', 'true'));
                }
                slider.newSlides = $(slider.vars.selector, slider); sliderOffset = (reverse) ? slider.count - 1 - slider.currentSlide + slider.cloneOffset : slider.currentSlide + slider.cloneOffset; if (vertical && !carousel) { slider.container.height((slider.count + slider.cloneCount) * 200 + "%").css("position", "absolute").width("100%"); setTimeout(function () { slider.newSlides.css({ "display": "block" }); slider.doMath(); slider.viewport.height(slider.h); slider.setProps(sliderOffset * slider.h, "init"); }, (type === "init") ? 100 : 0); } else { slider.container.width((slider.count + slider.cloneCount) * 200 + "%"); slider.setProps(sliderOffset * slider.computedW, "init"); setTimeout(function () { slider.doMath(); slider.newSlides.css({ "width": slider.computedW, "float": "left", "display": "block" }); if (slider.vars.smoothHeight) { methods.smoothHeight(); } }, (type === "init") ? 100 : 0); }
            } else {
                slider.slides.css({ "width": "100%", "float": "left", "marginRight": "-100%", "position": "relative" }); if (type === "init") { if (!touch) { if (slider.vars.fadeFirstSlide == false) { slider.slides.css({ "opacity": 0, "display": "block", "zIndex": 1 }).eq(slider.currentSlide).css({ "zIndex": 2 }).css({ "opacity": 1 }); } else { slider.slides.css({ "opacity": 0, "display": "block", "zIndex": 1 }).eq(slider.currentSlide).css({ "zIndex": 2 }).animate({ "opacity": 1 }, slider.vars.animationSpeed, slider.vars.easing); } } else { slider.slides.css({ "opacity": 0, "display": "block", "webkitTransition": "opacity " + slider.vars.animationSpeed / 1000 + "s ease", "zIndex": 1 }).eq(slider.currentSlide).css({ "opacity": 1, "zIndex": 2 }); } }
                if (slider.vars.smoothHeight) { methods.smoothHeight(); }
            }
            if (!carousel) { slider.slides.removeClass(namespace + "active-slide").eq(slider.currentSlide).addClass(namespace + "active-slide"); }
            slider.vars.init(slider);
        }; slider.doMath = function () {
            var slide = slider.slides.first(), slideMargin = slider.vars.itemMargin, minItems = slider.vars.minItems, maxItems = slider.vars.maxItems; slider.w = (slider.viewport === undefined) ? slider.width() : slider.viewport.width(); slider.h = slide.height(); slider.boxPadding = slide.outerWidth() - slide.width(); if (carousel) { slider.itemT = slider.vars.itemWidth + slideMargin; slider.minW = (minItems) ? minItems * slider.itemT : slider.w; slider.maxW = (maxItems) ? (maxItems * slider.itemT) - slideMargin : slider.w; slider.itemW = (slider.minW > slider.w) ? (slider.w - (slideMargin * (minItems - 1))) / minItems : (slider.maxW < slider.w) ? (slider.w - (slideMargin * (maxItems - 1))) / maxItems : (slider.vars.itemWidth > slider.w) ? slider.w : slider.vars.itemWidth; slider.visible = Math.floor(slider.w / (slider.itemW)); slider.move = (slider.vars.move > 0 && slider.vars.move < slider.visible) ? slider.vars.move : slider.visible; slider.pagingCount = Math.ceil(((slider.count - slider.visible) / slider.move) + 1); slider.last = slider.pagingCount - 1; slider.limit = (slider.pagingCount === 1) ? 0 : (slider.vars.itemWidth > slider.w) ? (slider.itemW * (slider.count - 1)) + (slideMargin * (slider.count - 1)) : ((slider.itemW + slideMargin) * slider.count) - slider.w - slideMargin; } else { slider.itemW = slider.w; slider.pagingCount = slider.count; slider.last = slider.count - 1; }
            slider.computedW = slider.itemW - slider.boxPadding;
        }; slider.update = function (pos, action) {
            slider.doMath(); if (!carousel) {
                if (pos < slider.currentSlide) { slider.currentSlide += 1; } else if (pos <= slider.currentSlide && pos !== 0) { slider.currentSlide -= 1; }
                slider.animatingTo = slider.currentSlide;
            }
            if (slider.vars.controlNav && !slider.manualControls) {
                if ((action === "add" && !carousel) || slider.pagingCount > slider.controlNav.length) { methods.controlNav.update("add"); } else if ((action === "remove" && !carousel) || slider.pagingCount < slider.controlNav.length) {
                    if (carousel && slider.currentSlide > slider.last) { slider.currentSlide -= 1; slider.animatingTo -= 1; }
                    methods.controlNav.update("remove", slider.last);
                }
            }
            if (slider.vars.directionNav) { methods.directionNav.update(); }
        }; slider.addSlide = function (obj, pos) {
            var $obj = $(obj); slider.count += 1; slider.last = slider.count - 1; if (vertical && reverse) { (pos !== undefined) ? slider.slides.eq(slider.count - pos).after($obj) : slider.container.prepend($obj); } else { (pos !== undefined) ? slider.slides.eq(pos).before($obj) : slider.container.append($obj); }
            slider.update(pos, "add"); slider.slides = $(slider.vars.selector + ':not(.clone)', slider); slider.setup(); slider.vars.added(slider);
        }; slider.removeSlide = function (obj) {
            var pos = (isNaN(obj)) ? slider.slides.index($(obj)) : obj; slider.count -= 1; slider.last = slider.count - 1; if (isNaN(obj)) { $(obj, slider.slides).remove(); } else { (vertical && reverse) ? slider.slides.eq(slider.last).remove() : slider.slides.eq(obj).remove(); }
            slider.doMath(); slider.update(pos, "remove"); slider.slides = $(slider.vars.selector + ':not(.clone)', slider); slider.setup(); slider.vars.removed(slider);
        }; methods.init();
    }; $(window).blur(function (e) { focused = false; }).focus(function (e) { focused = true; }); $.flexslider.defaults = { namespace: "flex-", selector: ".slides > li", animation: "fade", easing: "swing", direction: "horizontal", reverse: false, animationLoop: true, smoothHeight: false, startAt: 0, slideshow: true, slideshowSpeed: 7000, animationSpeed: 600, initDelay: 100, randomize: true, fadeFirstSlide: true, thumbCaptions: false, pauseOnAction: true, pauseOnHover: true, pauseInvisible: false, useCSS: true, touch: true, video: false, controlNav: false, directionNav: true, prevText: " ", nextText: " ", keyboard: true, multipleKeyboard: false, mousewheel: false, pausePlay: false, pauseText: "Pause", playText: "Play", controlsContainer: "", manualControls: "", sync: "", asNavFor: "", itemWidth: 0, itemMargin: 0, minItems: 1, maxItems: 0, move: 0, allowOneSlide: true, start: function () { }, before: function () { }, after: function () { }, end: function () { }, added: function () { }, removed: function () { }, init: function () { } }; $.fn.flexslider = function (options) {
        if (options === undefined) { options = {}; }
        if (typeof options === "object") { return this.each(function () { var $this = $(this), selector = (options.selector) ? options.selector : ".slides > li", $slides = $this.find(selector); if (($slides.length === 1 && options.allowOneSlide === true) || $slides.length === 0) { $slides.fadeIn(400); if (options.start) { options.start($this); } } else if ($this.data('flexslider') === undefined) { new $.flexslider(this, options); } }); } else { var $slider = $(this).data('flexslider'); switch (options) { case "play": $slider.play(); break; case "pause": $slider.pause(); break; case "stop": $slider.stop(); break; case "next": $slider.flexAnimate($slider.getTarget("next"), true); break; case "prev": case "previous": $slider.flexAnimate($slider.getTarget("prev"), true); break; default: if (typeof options === "number") { $slider.flexAnimate(options, true); } } }
    };
})(jQuery);

$(function () {
    $('#main-menu').smartmenus({
        mainMenuSubOffsetX: -1,
        subMenusSubOffsetX: 10,
        subMenusSubOffsetY: 0
    });
});

$('.flexslider').flexslider({
    animation: "slide"
});

$(document).ready(function () {
    var owl = $("#owl-demo");
    owl.owlCarousel({
        autoPlay: 10000,
        items: 3,
        navigation: true,
        responsive: true,
        stopOnHover: true,
        lazyEffect: "fade",
        itemsDesktop: [1199, 3],
        itemsDesktopSmall: [979, 2],
        itemsTablet: [768, 1],
        itemsTabletSmall: false,
        itemsMobile: [479, 1]
    });
});


$(document).ready(function () {
    var owl = $("#owl-demo1");
    owl.owlCarousel({
        autoPlay: 10000,
        items: 3,
        navigation: true,
        responsive: true,
        stopOnHover: true,
        lazyEffect: "fade",
        itemsDesktop: [1199, 3],
        itemsDesktopSmall: [979, 2],
        itemsTablet: [768, 1],
        itemsTabletSmall: false,
        itemsMobile: [479, 1]
    });
});


$(document).ready(function () {
    $(".btnContent").click(function () {
        $(this).siblings('.full-content').fadeToggle(800);
        if ($(this).hasClass('view-more-open')) {
            $(this).removeClass('view-more-open').addClass('view-more-close').text('View Less');
        } else if ($(this).hasClass('view-more-close')) {
            $(this).removeClass('view-more-close').addClass('view-more-open').text('View More');
        }
    });
});

$(function () {
    $('[data-toggle="tooltip"]').tooltip();

})


jQuery(function () {
    $('.page-wrapper table').addClass('table table-striped table-bordered').wrap("<div class='table-responsive'></div>");

});

